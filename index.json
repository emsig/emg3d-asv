{"project": "emg3d", "project_url": "https://emg3d.emsig.xyz", "show_commit_url": "https://github.com/emsig/emg3d/commit/", "hash_length": 8, "revision_to_hash": {"0": "72f12ab0b2439b610de52c3b4de7c8ce6200fa6a", "16": "3618cea4b2e3ad3009d59678f9ea9c9dfa0acb1c", "19": "7782f415f11f732cf0a2578835f281fab0835708", "20": "06268b79f6ba899b4dbd16f0975d2de0b5b40889", "21": "0dbd285b113835cad8d4fec2822cbf559b776857", "22": "10e61b75c4ec0777fb4d91904be6cb32434800e0", "23": "4eeee3366bea25801d51a4af43cae6b8e69f3ba3", "29": "6c90915f888679606c59ec01766fa1e450d6f034", "30": "f07d21513819cd1ef8c04e734e07b8591206932e", "31": "6e9ac78f56a3e2a8b73eb8cbb0f3cc2adbf250bc", "32": "b4b4ed1c56291cca08d4589e29e4c4286b0d39d9", "36": "5521ba3c0ff17ef65057d3bb5fda366de2bde575", "38": "6867dd4b4a5283c7fd9090abef5d640d9101d394", "39": "125d4101ff01f6bc2a67947ff98f43d5e0d4c4f7", "40": "d653640fae3fcf6d27728be0b3c81025713efafa", "42": "fe5ba1a82db2f253c7c45ff8bd351b3d96d69ead", "50": "54fef352d91bc2ac13290fdf936a7f0745997666", "51": "7993df157d2b1a470442584e13185c31b76db761", "52": "3d5f43f3fdba1754aaeb9ceaba8ebf250ebb9978", "53": "697760f62edec04a40fbd86e22955da18d12e1b9", "54": "148c44d887d293354b90ee771b829d449ded0387", "55": "da58946c7d1325b376f3cb0c7e624234e72ceb46", "56": "13b4888926d261d7050d20d6ae1b2562282e38d4", "57": "501624a050b78f6cb185a92333c6d60506e0d11e", "58": "414095605b4d888033281be327e99720ef239411", "59": "869d2236c9aeef94c7b0a112467040e135b1ad3f", "60": "eef25f71d9328ec651dd9e7d9de5b66656795fa9", "61": "dfa8bb1754b47a30fa3c5fbc38f44c655e3fb92e", "62": "ebd2c9d5463c90e12f58ece674d48b03876f72bb", "63": "66949e1f93efcac4884531606a7e465235c92b6d", "64": "482d8f88870ec32d2cc2714d2d7706f9b3f46e43", "65": "12c5aeb54f6019270f2a1e605e952d77decba015", "66": "86f91359c648dd4224488402df0a7db8ed91c2c4", "67": "5d491d002a8aaa56342bb7d04963fc20d2dcc9c2", "68": "2dca8b7e570bfb161826f4c48aa2ac9d86fc0a2b", "69": "8377455ff56f2bb7a91ce1644a2e136aeb0a7016", "70": "e9b5181b689846d2451bed5ad07ad5e2a1fe34a6", "71": "42a648dc48ad81153ec318fcb8857895568bc77c", "72": "cbccadabab75227b08e3f8089efe085c6606020e", "76": "56cb5010d777ef35dd25ecee4c215e98e2ac119d", "77": "69996c34203718b48a1d02b41efdc4541eea8e7b", "78": "36891f1728bd9950ca5b9d4038c1278d61e677b5", "79": "478ce2a12748843ca526f8c5a312769ebea382c6", "80": "2738dda90c8e50bc6626a0304cd7714b7f8b4203", "81": "4235b7290a24d5129985e8d7457a1eb7e7697238", "82": "2dbe393e611b442aa5827ff9b27cd5d58d37b74c", "83": "0a40d52e0bf9f4210414b1c464bd29aaba8bdfac", "84": "aae1a39f566f2fe924826f95adf1337109676255", "85": "85bd4a3e96106be0dccce9d5f0d98568b797ffca", "86": "d1ce5b5d00eb7d4567a9d5c1c1ca2b040a154f62", "87": "c4d6496acff270012fafe1d3b36bcc1ee99dc086", "88": "171ef12615a84c64baf936c5bd679e874437f5db", "89": "42da05bc21359843bdf7d21f353ed6890271999b", "90": "9ea5e8db02351f6a2f055fb509cd2a12fd8f3298", "91": "115965e80c539e872f4883bdc65a25ed96ada4e8", "93": "f8945c5baba94cadeffd84837c55818125c0bed2", "95": "3f1a54204b47185a2cc492576b9ebcaa4b0a6e2a", "97": "40f26ad94e5b32ce1b8d6e8f8c64f02ffce11017", "100": "de199732e0c0f37a9e6bcd3d084c1e532766d1d2", "103": "d470b243caefb90d6d03bc759ef5710f6f5a2b3d", "104": "44ba3e942b7ce6e6ca217e379c63f9da1a3fbfb9", "105": "98c021d6ad47034ff6332707ab75c1d104ad29ca", "106": "955b925e1fd9983beb44cc357aa61b14b86d3fef", "107": "73905098b923425144a780f4fdeb0499b875066f", "108": "c44dad5533b0190e81029b310e2adba0332a1bc3", "113": "88f73115b1c9b8682b4555ee43040a613cd7b21a", "117": "71f94f774e58fc553b398651f607a2a08225c0f6", "119": "36a93992ce39f5f6ff2b7d9e19d7d2b81cd254aa", "122": "d221fad34d7e4ba5f001265a67b5e1fc939f85df", "123": "05d13b2adea8fb9cf48fb6ec29b0cfad5479322f", "124": "8e82ce6189c256958e98b21bedb590d0cfcc896a", "126": "f57644a10525169c9e0f0f60d940132899ab5c01", "136": "3dfbf2af5f3c49358426bb462feb5aacdc411062", "138": "7580197086af6e23b39b710bf5e5cbfa5f7ea980", "139": "9b79b68577b42f62f891f4dac65de59c2a9f1f74", "140": "70ff785208661d7c75dde5b81519b8fe457741fa", "147": "6ead79a109dd51560df0bbe2704d985a084a7120", "151": "1cd62aaf46f98bfec27a8c794eaf3a46971e478d", "152": "13a08271948186ce50a977e5ef9b39c1630e52ac", "160": "57a0ee1207987961df7d4a1c4365e1fb129dbfce", "163": "bbc89a418a687c5d2e11c3607b0c179205c02d66", "164": "5ece4a4c56513aabf2e080ff61815d50e382341c", "165": "b5d50d7ec2927ee79fec7068f0e82b5f7444f1b2", "166": "a9080bb9c100e16b99c8e09a3aae4454c4f2c2c0", "167": "69b651f60d5e1da353ffeaebbfcce8d8cc0fec1f", "173": "02e152d14ec2c527a791e421ca492c7efdb6fcab", "174": "0ec2770037d4970a20f6e0132b8aa4ce844461ca", "175": "a5de17c2bd2d3bfcc7a599c8cd8203d2cca321a1", "176": "1d9b30314f48d8c5b65a5a9deb6105df8f54e119", "177": "65f2aa9338fd7a0d0bfb0ef7438c7bdfd9db2ba2", "178": "d255e2de67738d06e2105201ae93b194e460898d", "179": "f34dcb660b66558b462fca2476d5f020dd7b67a6", "181": "f03a5c808aba59477899a16174b93b2f2bf2bc71", "185": "894e3931385f5c07ef37cd8559f1fd1842898a75", "189": "555ea2fd93847f88792329b6121d5f43f2de008a", "195": "d9c22d526a914e8e8bacd1a221afd193dc59ea90", "202": "01820dad7411b9161a89e4bc33ef07ef4406bdff", "211": "9e87da812d5ee0cb2a2453cd7c21fc908a1bd3e2", "214": "8efe8800f3d4fff0aad0f6e7fbafe4dd9b2d9906", "220": "06d2c8955875928df56cb38cf7b422d14701423a", "222": "50cd14d24dc8c918ea5eda3b9af9a7f2fd7b3856", "223": "0069c4091c554b376d4d761d30808d76f43649f4", "224": "f771dcab5a0f3d6859cd312ad2807a6e5f59cf00", "232": "b4de17e974405d8842aa7167b46919f2f049a1c6", "233": "777abee0feee9d9bd66c350e43d26cb414b17ed5", "239": "b2c2b23e5b3e32285b1409c8331548b2e91f3f6d", "241": "1c68d5d635e40aa41e9c3a410c204f4cd17d7f9f", "247": "373a1aa8b569aaeb4ada70e73859834ac46bd704", "248": "761622929fe50de77e22f3fb730cab5f0da9ecb7", "249": "3f470f143cd5529b7032821456f9d60a4e8ca8ed", "254": "ae17baf5598ffa297d338f222b39f198c961dd39", "255": "bdbb96c28783deb80ed05b593a7bf2592280da64", "258": "57c684f520d29d7a2a42cbb1c78cf8a527ee1afd", "262": "ac67b3ee951a829e3ae33f87ef8c0cb5d2cb9151", "263": "d32da84b3964e16318019fe0cabac9b619b1d893", "266": "e74eb30633f19e656f1510b97ee69e0ca71ceb9d", "272": "0dd38e271616d4467408caeccc380ce273d75dda", "276": "4a34cc162e15771c5b9e582f8d36be90e851de1e", "277": "c7c186ad7edd393df46eb0f2993b53dfb41daced", "286": "0d949e183bdd4310191125374da41806f098ac86", "287": "294b8d43252439d379ae6dc856a8b1c9a6d62f2f", "295": "68bd6b0a4c771386e6da4a6e1ad5926ac824d084", "300": "d8e98c012a5389880f9347937b3c56e1d8a77961", "301": "41359490ffaa184a5a71815b7ee7e2499e8acdcf", "302": "df9766a921bd7ba9bd9aa9ee7787128a37045b05", "308": "0b9f9385ca8105690c2416b7fc077bc001176420", "310": "0b4f2f8900ff03da26854e489b4766e33dfe3a44", "312": "b7da105330b2714c01412741738728a723b33858", "317": "c1623962753f00191d2667f8e1f9799383b867bc", "319": "a98b1cdc217cf20825effc23da9f9e3f8c19231a", "325": "e43386e4e9b77fcacf05f51a97ec17d433e4934a", "327": "80318ab170b04d1d5e5e78e4cc80c1408b78233b", "331": "c9e595eb046cbe0cb4f80b44a58ad97d76db78e1", "351": "7ae48ec8b30493df4db4e2dbd93780cb9c6a1862", "355": "5d1a48512d4570fd9d8fcaf3f8d2e6e597596643", "358": "17ad9e8c6a4913d0fb0663b87d1d8ec3c02f160b", "363": "03bf47a689c2a794be10f493a27542e23a55fe95", "364": "b3748374fb62e3d638a0c1a240cf96a81cf02330", "371": "ec9be31ca9458772b1cd961084dedcddf04c5e4f", "377": "6ecfe15559504c06d92cf55679c6c5ef7b6151c7", "379": "5bf4617c956c37dfd19f46dc65d2f6abc1bda0f7", "398": "b28401fb5bc4bb8bbbed0145e91d7fe3e995d9c3", "405": "eaa69f04e13a5dcd0890c3f4ff037dc77b2c004a", "409": "985be811848e0e20305929bf40c933e2e7962550", "431": "8c31324bd6f23f6a8d90977cda63f6b000291f12", "434": "a6d4b00d86f2a7e3449e2dbde252d4e3baa963b0", "435": "5d4d65c7be1d856f3ab756d0804f1a39a1d7b20a", "446": "7c73286003537902357d23f48ba991a8d6d1fbe8", "452": "29daa7b514c0fcc5bf902179aadddc2e4fd8bc51", "523": "2cb5f31e13ab7099a289f480c5f0e434b919bdfc", "526": "f79654a14d4b167743ed3680ab87a9794b20d584", "528": "db53cdedaffe86c30c76283e5f0fdf614bd5bd70", "530": "3b9c81acae75f1e4d1aebb323151778969d92075", "532": "f94b808c7adbf710ca66710efd644c17958afe3c", "539": "1b1695520ae06d9cc9f33895a2086ead8dddfc3a", "542": "4da36a2873ca054bbca68243054424e1708b010c", "546": "09c18d244397ae89b3b2782826e7ed0937a5472b", "556": "2248bb7b68cb646f5b96847b08081e0b077ac4cb", "581": "cee67ae0629cf679439879bdf0630f6a6d02f189", "583": "8f7233020ec95263ffc410214462d088770868c9", "587": "e10b527d328ed3f95140dce396ea8a3c419ee26e", "590": "236653dcc21b2fc553705ae55496b596d89d3fb1", "594": "575fc7aa455ddb35574dce23993ca222805ee877", "598": "293c256d2c286c099a3a8aeb5cadd72bc19aeeca", "602": "c380dec839f40e831b8872ae5187a2226724f005", "618": "907839c84135fcc154e993016d18891e10ae3eb4", "622": "b929f6f86ba01f87604b39b72c73882fbb2c8c0a", "652": "a97193fb57775dd0eba48b6c720b9e320747b058", "656": "303be4df65a28e77453fdefd28d947e4cc3ca358", "659": "f0ab94cca90892c056646b131ccf832880d1d3b0", "660": "826bfa9074735f173d4d40219cc3a99d6571a3c8", "664": "25cca56426667ca6a4338028f0ae600a8018f6da", "670": "f1ed1c60bfc5e83e95cc028406e92cef99f82c0c", "673": "5532a3e0364fabbc45b1107e00ad2e5fa12ebe78", "675": "4e6a912c7b693baf72d9542b4b9ec4b03998cb69", "678": "b00e93999c715420dec4646b66d0bbcea3510d86", "693": "4e7df8c0e9ecfbe76576f0f2e766e3040a9f1081", "699": "58961a630c876b663ff47c0000d8b92051b15165", "706": "957953afe240c09a0761c49ef6552b9a9ee560a1", "708": "d1b2713799b572e3c6994aee735e9fef937b12ca", "709": "f8c768b99bdfdaedb122f719fbdf0d2640f41202", "714": "62d479bbe0914d634df28f48ad09777d52b95956", "717": "cbff1181fa89068e2030fd834bc14c08b6769a23", "720": "290fa394deda0dd6c7ca522d738d728a17ad2103", "722": "5592d3cb919d70e39b2061c21ecd05d78ffd203d", "723": "a8aab4f5731f4b201ca7ffae1dd4b819a411d90f", "725": "02fc5f15fb9764f09548e3a96b87b16f4f25fd01", "732": "cbaf3234fede5c9b2e1c464e5e1244eb9c440970", "734": "c118106d9432a2030ad0c2fabf73b1b27fd36113", "739": "af80b1e960f302e084e2607d8872434b2bd7775f", "747": "37e39067177b28b86d929581f906e49d5d4d307a", "749": "9def558252d37bdabfd73ea7362cb46a674ffea9", "753": "ece2baf42ffc16cf19746f1c46c15f87460b8e9e", "770": "fd7233c6836030680155cd0862bfb9ddd8e0bd29", "776": "cb13b27020f1499b6b9bad54abe8fa492738cd98", "781": "bb0baf6e61a35fa4898ba934d3930ea829b08f0f", "785": "380fe8df46d3e834441228b2431d60d922e3f00a", "787": "3cf711bfa50ebba6f725f4e3e8d77abfe73647b8", "793": "e03e274634969b1c758b3336e7ec0e4719e91f85", "801": "5d38d2b3b297f65b77b4bbfe38a1889f6c58eeb7", "805": "d406ed5c23817458d0bf5d2265f94deda30eb4c3", "808": "c621cbfd4b82b424d07d98a6f918b324ba06c378", "817": "4305fe81cd0362f92e7b17d170d2f8c48ca2826f", "854": "1a3add15692492af5d9f007b7aac5cd83586289a", "1001": "36d3b7030cdc44c7a46182c694c35854613285b2", "1008": "46b33ef6cb7ae4d23b8b93dea88e08e317154a33", "1028": "765c8a52a41df6576840f04ea9edcddb23e1070a", "1041": "a58a95c0c510b36494d75fed20cadd028de73ec6", "1052": "0d87467f92e3f2c82754f430ffcb38acf69cdaf5", "1055": "8b8ca10cd6af11b105d64eb6aea47d78f359189b", "1073": "610e050641a7b3ab2600f9c97fc7c4529804853d", "1077": "22d640e00da7a1f971703c751e641b44864dfc26", "1080": "1db110d2a6f798a9e2126752b3968b92e3ba3585", "1085": "ad94519fbb2b5b2a0073490a3e4e81eb49fe2cf5", "1092": "98434ed02177507dce6a423c0020afb6cc19ea3f", "1099": "ee3cde4ca00ce468646d03a7d57d08f730b342b6", "1112": "a0264c89f6a400d12ef94ec59e67db8db441cced", "1114": "3c4486ea0d824f6e7d5232e99237130e4f9eb8ab", "1117": "c26b811ae583c7fd6d25ac7de7818c796449b755", "1122": "0f2baf65f3a82798e0b7a6983ddddcbb5763b1c6", "1130": "bb30a201308ab64ca14f59b951d262526f9a906a", "1136": "1109cc223601ff56d0a982e9f2b902d0c60c7c4e", "1139": "f6c38d2081efde93132cd6b269228da1c5c54366", "1145": "6e2e37a2431467eb624bc0612269f88b0fb66032", "1148": "39873c9ef3e844209247c47148b80829081302bd", "1187": "fd060670b9e6d95348a40552495cde5fabe9c9fa", "1201": "0bd3c7605c70307e6c2169488c6cf0a1921da503", "1214": "5ad0d28cc5f7ca661e315a2b79a3fe2cbfb3c64f", "1217": "2a2ce77728576b920c7bb6b654ed860569b5c812", "1218": "f9d168652602e2d647693503e41a2cb23eb8ec80", "1230": "e4d6ac8c4bcc99f65d62f8ff6fa4b0a3ff662180", "1231": "e3aba4274424ae61094234946425240883aa2b91", "1243": "5c1e132e0b0a49185b2ca3df2c4b45b7a4914fab", "1248": "8a6d2634923f2e14f7d310f5417671d509e15579", "1253": "c521be02b8c74209c1935d1b5600257dd617e961", "1255": "da95afcb08c96770bf995678ba13ab87eff85655"}, "revision_to_date": {"0": 1555486509000, "16": 1555498203000, "19": 1556703968000, "20": 1556707717000, "21": 1556708215000, "22": 1556710304000, "23": 1556710585000, "29": 1556864802000, "30": 1556895118000, "31": 1556897500000, "32": 1558074574000, "36": 1558076207000, "38": 1558096687000, "39": 1558099924000, "40": 1558346255000, "42": 1558380800000, "50": 1558511031000, "51": 1558595374000, "52": 1558601451000, "53": 1558610947000, "54": 1558612223000, "55": 1558616235000, "56": 1558618968000, "57": 1558621435000, "58": 1558639056000, "59": 1558706713000, "60": 1558711447000, "61": 1558724958000, "62": 1558773987000, "63": 1558855123000, "64": 1558859184000, "65": 1558861785000, "66": 1558862915000, "67": 1558864509000, "68": 1559020979000, "69": 1559021220000, "70": 1559026671000, "71": 1559034472000, "72": 1559034743000, "76": 1559284532000, "77": 1559290996000, "78": 1559299031000, "79": 1559306863000, "80": 1559334272000, "81": 1559374675000, "82": 1559377492000, "83": 1559552379000, "84": 1559556620000, "85": 1559570931000, "86": 1559586783000, "87": 1559587266000, "88": 1559724649000, "89": 1559745330000, "90": 1559819921000, "91": 1559828919000, "93": 1559922563000, "95": 1560158328000, "97": 1560171744000, "100": 1560410774000, "103": 1560415231000, "104": 1560426573000, "105": 1560449094000, "106": 1561538632000, "107": 1561555864000, "108": 1561709858000, "113": 1561972198000, "117": 1562053611000, "119": 1562053872000, "122": 1562137613000, "123": 1562160438000, "124": 1562164638000, "126": 1562175668000, "136": 1562319435000, "138": 1562319486000, "139": 1562319990000, "140": 1562320265000, "147": 1562671540000, "151": 1562941332000, "152": 1563047705000, "160": 1563256106000, "163": 1563273537000, "164": 1563275073000, "165": 1563279292000, "166": 1563282192000, "167": 1563284550000, "173": 1563372475000, "174": 1563373106000, "175": 1563374365000, "176": 1563778590000, "177": 1563794892000, "178": 1564054020000, "179": 1564059847000, "181": 1564139599000, "185": 1564150065000, "189": 1566560000000, "195": 1567006111000, "202": 1568012840000, "211": 1568212866000, "214": 1568704747000, "220": 1570092159000, "222": 1570098304000, "223": 1570192615000, "224": 1570193604000, "232": 1571768362000, "233": 1571820690000, "239": 1572469897000, "241": 1572616435000, "247": 1572621924000, "248": 1572679506000, "249": 1572680426000, "254": 1572775688000, "255": 1572858355000, "258": 1572871642000, "262": 1572951163000, "263": 1572965824000, "266": 1573036624000, "272": 1573137229000, "276": 1573148895000, "277": 1573151190000, "286": 1573396281000, "287": 1573396599000, "295": 1573633055000, "300": 1573648475000, "301": 1573649974000, "302": 1573724861000, "308": 1575274474000, "310": 1575643656000, "312": 1575647285000, "317": 1576484219000, "319": 1576485501000, "325": 1577357075000, "327": 1577358011000, "331": 1577996034000, "351": 1578410542000, "355": 1578737891000, "358": 1580478630000, "363": 1581423995000, "364": 1581424307000, "371": 1583529630000, "377": 1583766720000, "379": 1583830763000, "398": 1585164733000, "405": 1587620434000, "409": 1588167330000, "431": 1588316559000, "434": 1588672126000, "435": 1588672768000, "446": 1589381630000, "452": 1589886535000, "523": 1594628090000, "526": 1594633692000, "528": 1594647458000, "530": 1594718781000, "532": 1594811224000, "539": 1594924565000, "542": 1594972731000, "546": 1594981695000, "556": 1595232466000, "581": 1595680786000, "583": 1595766720000, "587": 1597998573000, "590": 1598369199000, "594": 1598421417000, "598": 1598451269000, "602": 1600797795000, "618": 1602697868000, "622": 1603899342000, "652": 1604767752000, "656": 1605033685000, "659": 1605357405000, "660": 1605357691000, "664": 1605697635000, "670": 1605729133000, "673": 1605812322000, "675": 1606754853000, "678": 1606761201000, "693": 1607024411000, "699": 1607075006000, "706": 1607090163000, "708": 1607091719000, "709": 1607101046000, "714": 1607437773000, "717": 1607445907000, "720": 1607459109000, "722": 1607523247000, "723": 1607526844000, "725": 1607592468000, "732": 1610125539000, "734": 1610126577000, "739": 1610291675000, "747": 1610435171000, "749": 1610438617000, "753": 1610543412000, "770": 1610994553000, "776": 1611752542000, "781": 1612814063000, "785": 1612875721000, "787": 1612880977000, "793": 1612900116000, "801": 1613152520000, "805": 1613403826000, "808": 1613505485000, "817": 1614759151000, "854": 1615368690000, "1001": 1618565552000, "1008": 1619025054000, "1028": 1621755770000, "1041": 1622144036000, "1052": 1622230633000, "1055": 1622233943000, "1073": 1624633273000, "1077": 1624634516000, "1080": 1624638245000, "1085": 1624646821000, "1092": 1624979848000, "1099": 1625060412000, "1112": 1625405322000, "1114": 1626463128000, "1117": 1626965452000, "1122": 1626983615000, "1130": 1627373376000, "1136": 1629233820000, "1139": 1629281338000, "1145": 1629377151000, "1148": 1629378851000, "1187": 1629627528000, "1201": 1629883072000, "1214": 1630228329000, "1217": 1630151996000, "1218": 1630396680000, "1230": 1630753566000, "1231": 1630757271000, "1243": 1635335777000, "1248": 1636814449000, "1253": 1637409203000, "1255": 1637411084000}, "params": {"arch": ["x86_64"], "cpu": ["Intel(R) Core(TM) i5-5250U CPU @ 1.60GHz", "Intel(R) Core(TM) i7-6600U CPU @ 2.60GHz"], "machine": ["dtr-laptop", "meerkat"], "num_cpu": ["4", null], "os": ["Linux 4.15.0-47-generic", "Linux 5.4.0-48-generic"], "ram": ["16275844", "8045576"], "python": ["3.8"], "branch": ["main"]}, "graph_param_list": [{"arch": "x86_64", "cpu": "Intel(R) Core(TM) i7-6600U CPU @ 2.60GHz", "machine": "dtr-laptop", "num_cpu": "4", "os": "Linux 5.4.0-48-generic", "ram": "16275844", "python": "3.8", "branch": "main"}, {"arch": "x86_64", "cpu": "Intel(R) Core(TM) i5-5250U CPU @ 1.60GHz", "machine": "meerkat", "os": "Linux 4.15.0-47-generic", "ram": "8045576", "python": "3.8", "branch": "main", "num_cpu": null}], "benchmarks": {"memory.ResidualMemory.peakmem_residual": {"code": "class ResidualMemory:\n    def peakmem_residual(self, data, size):\n        grid = data[size]['grid']\n        model = data[size]['model']\n        if INFO > (1, 0, 0, 0):\n            sfield = Field(grid, data[size]['sfield'].field,\n                           data[size]['sfield'].frequency)\n            efield = Field(grid, data[size]['sfield'].field*0,\n                           data[size]['sfield'].frequency)\n        else:\n            sfield = Field(grid, data[size]['sfield'])\n            efield = Field(grid, data[size]['sfield']*0)\n        if INFO < (0, 17, 1, 7):\n            inp = (grid, model, sfield, efield)\n        else:\n            inp = (model, sfield, efield)\n        _ = emg3d.solver.residual(*inp)\n\n    def setup_cache(self):\n        data = {}\n        for size in self.params[0]:\n            data[size] = {}\n            grid, model, sfield = get_model(size)\n            data[size]['grid'] = grid\n            data[size]['sfield'] = sfield\n            # Needs VolumeModel from 0.9.1dev4 / d8e98c0 onwards.\n            if INFO < (0, 9, 1, 4):\n                data[size]['model'] = model\n            elif INFO < (0, 17, 1, 7):\n                data[size]['model'] = VolumeModel(grid, model, sfield)\n            else:\n                data[size]['model'] = VolumeModel(model, sfield)\n        return data", "name": "memory.ResidualMemory.peakmem_residual", "param_names": ["size"], "params": [["'small'", "'big'"]], "setup_cache_key": "/home/dtr/Codes/emsig/benchmarks/emg3d-asv/benchmarks/memory.py:212", "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "1b26a409f901597ee11823abce854d6f5968cd2a7dc4c4f34d49c0c0f9f7be5b"}, "memory.SmoothingMemory.peakmem_smoothing": {"code": "class SmoothingMemory:\n    def peakmem_smoothing(self, data, lr_dir, size):\n        grid = data[size]['grid']\n        model = data[size]['model']\n        if INFO > (1, 0, 0, 0):\n            sfield = Field(grid, data[size]['sfield'].field,\n                           data[size]['sfield'].frequency)\n        else:\n            sfield = Field(grid, data[size]['sfield'])\n        efield = Field(grid)\n        if INFO < (0, 17, 1, 7):\n            inp1 = (grid, model, sfield, efield, 2, lr_dir)\n            inp2 = (grid, model, sfield, efield)\n        else:\n            inp1 = (model, sfield, efield, 2, lr_dir)\n            inp2 = (model, sfield, efield)\n        emg3d.solver.smoothing(*inp1)\n        _ = emg3d.solver.residual(*inp2)\n\n    def setup_cache(self):\n        data = {}\n        for size in self.params[1]:\n            data[size] = {}\n            grid, model, sfield = get_model(size)\n            data[size]['grid'] = grid\n            data[size]['sfield'] = sfield\n            # Needs VolumeModel from 0.9.1dev4 / d8e98c0 onwards.\n            if INFO < (0, 9, 1, 4):\n                data[size]['model'] = model\n            elif INFO < (0, 17, 1, 7):\n                data[size]['model'] = VolumeModel(grid, model, sfield)\n            else:\n                data[size]['model'] = VolumeModel(model, sfield)\n        return data", "name": "memory.SmoothingMemory.peakmem_smoothing", "param_names": ["lr_dir", "size"], "params": [["0", "1", "2", "3"], ["'small'", "'big'"]], "setup_cache_key": "/home/dtr/Codes/emsig/benchmarks/emg3d-asv/benchmarks/memory.py:172", "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "3e4ca16b048dcf2ec227ddcc4869feac3a5a83260eec3147117ae633ea419d18"}, "memory.SolverMemory.peakmem_solver": {"code": "class SolverMemory:\n    def peakmem_solver(self, data, sslsolver, anisotropy):\n        grid = data[anisotropy]['grid']\n    \n        if INFO > (1, 0, 0, 0):\n            sfield = Field(grid, data[anisotropy]['sfield'].field,\n                           data[anisotropy]['sfield'].frequency)\n        else:\n            sfield = Field(grid, data[anisotropy]['sfield'])\n    \n        inp = {\n            'model': data[anisotropy]['model'],\n            'sfield': sfield,\n            'cycle': 'F',\n            'sslsolver': sslsolver,\n            'semicoarsening': True,\n            'linerelaxation': True,\n            'verb': VERB\n        }\n    \n        if INFO < (0, 17, 1, 7):\n            inp['grid'] = grid\n    \n        solve(**inp)\n\n    def setup_cache(self):\n        data = {}\n        for anisotropy in self.params[1]:\n            data[anisotropy] = {}\n            grid, model, sfield = get_model('small', anisotropy)\n            data[anisotropy]['grid'] = grid\n            data[anisotropy]['model'] = model\n            data[anisotropy]['sfield'] = sfield\n        return data", "name": "memory.SolverMemory.peakmem_solver", "param_names": ["sslsolver", "anisotropy"], "params": [["True", "False"], ["'iso'", "'vti'", "'tri'"]], "setup_cache_key": "/home/dtr/Codes/emsig/benchmarks/emg3d-asv/benchmarks/memory.py:127", "timeout": 120, "type": "peakmemory", "unit": "bytes", "version": "a3bf591f5b27c95946b9985e2b9e2b3a4f0126fef39e5d49ad80b9dd788626f3"}, "time.ResidualTime.time_residual": {"code": "class ResidualTime:\n    def time_residual(self, data, size):\n        grid = data[size]['grid']\n        model = data[size]['model']\n        if INFO > (1, 0, 0, 0):\n            sfield = Field(grid, data[size]['sfield'].field,\n                           data[size]['sfield'].frequency)\n            efield = Field(grid, data[size]['sfield'].field*0,\n                           data[size]['sfield'].frequency)\n        else:\n            sfield = Field(grid, data[size]['sfield']*0)\n            efield = Field(grid, data[size]['sfield'])\n        if INFO < (0, 17, 1, 7):\n            inp = (grid, model, sfield, efield)\n        else:\n            inp = (model, sfield, efield)\n        _ = emg3d.solver.residual(*inp)\n\n    def setup_cache(self):\n        data = {}\n        for size in self.params[0]:\n            data[size] = {}\n            grid, model, sfield = get_model(size)\n            data[size]['grid'] = grid\n            data[size]['sfield'] = sfield\n            # Needs VolumeModel from 0.9.1dev4 / d8e98c0 onwards.\n            if INFO < (0, 9, 1, 4):\n                data[size]['model'] = model\n            elif INFO < (0, 17, 1, 7):\n                data[size]['model'] = VolumeModel(grid, model, sfield)\n            else:\n                data[size]['model'] = VolumeModel(model, sfield)\n        return data", "min_run_count": 2, "name": "time.ResidualTime.time_residual", "number": 0, "param_names": ["size"], "params": [["'small'", "'big'"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "setup_cache_key": "/home/dtr/Codes/emsig/benchmarks/emg3d-asv/benchmarks/time.py:292", "timeout": 60.0, "type": "time", "unit": "seconds", "version": "ace5b8ae98552c93397ddb00f8194b99ed24677a499e2b8b8b41c2397d8a82ba", "warmup_time": -1}, "time.SmoothingTime.time_smoothing": {"code": "class SmoothingTime:\n    def time_smoothing(self, data, lr_dir, size):\n        grid = data[size]['grid']\n        model = data[size]['model']\n        if INFO > (1, 0, 0, 0):\n            sfield = Field(grid, data[size]['sfield'].field,\n                           data[size]['sfield'].frequency)\n        else:\n            sfield = Field(grid, data[size]['sfield'])\n        efield = Field(grid)\n        if INFO < (0, 17, 1, 7):\n            inp1 = (grid, model, sfield, efield, 2, lr_dir)\n            inp2 = (grid, model, sfield, efield)\n        else:\n            inp1 = (model, sfield, efield, 2, lr_dir)\n            inp2 = (model, sfield, efield)\n        emg3d.solver.smoothing(*inp1)\n        _ = emg3d.solver.residual(*inp2)\n\n    def setup_cache(self):\n        data = {}\n        for size in self.params[1]:\n            data[size] = {}\n            grid, model, sfield = get_model(size)\n            data[size]['grid'] = grid\n            data[size]['sfield'] = sfield\n            # Needs VolumeModel from 0.9.1dev4 / d8e98c0 onwards.\n            if INFO < (0, 9, 1, 4):\n                data[size]['model'] = model\n            elif INFO < (0, 17, 1, 7):\n                data[size]['model'] = VolumeModel(grid, model, sfield)\n            else:\n                data[size]['model'] = VolumeModel(model, sfield)\n        return data", "min_run_count": 2, "name": "time.SmoothingTime.time_smoothing", "number": 0, "param_names": ["lr_dir", "size"], "params": [["0", "1", "2", "3"], ["'small'", "'big'"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "setup_cache_key": "/home/dtr/Codes/emsig/benchmarks/emg3d-asv/benchmarks/time.py:252", "timeout": 60.0, "type": "time", "unit": "seconds", "version": "aedd9d1b58cf4f92bbc092a3f43b85aacbe799e6d28411d3dc653808c663a05b", "warmup_time": -1}, "time.SolverTimeCycle.time_solver": {"code": "class SolverTimeCycle:\n    def time_solver(self, data, cycle):\n        grid = data['grid']\n        if INFO > (1, 0, 0, 0):\n            sfield = Field(grid, data['sfield'].field,\n                           data['sfield'].frequency)\n        else:\n            sfield = Field(grid, data['sfield'])\n        inp = {\n            'model': data['model'],\n            'sfield': sfield,\n            'cycle': cycle,\n            'sslsolver': False,\n            'semicoarsening': True,\n            'linerelaxation': True,\n            'verb': VERB\n        }\n    \n        if INFO < (0, 17, 1, 7):\n            inp['grid'] = grid\n    \n        solve(**inp)\n\n    def setup_cache(self):\n        data = {}\n        grid, model, sfield = get_model('small')\n        data['grid'] = grid\n        data['model'] = model\n        data['sfield'] = sfield\n        return data", "min_run_count": 2, "name": "time.SolverTimeCycle.time_solver", "number": 0, "param_names": ["cycle"], "params": [["'V'", "'W'", "'F'"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "setup_cache_key": "/home/dtr/Codes/emsig/benchmarks/emg3d-asv/benchmarks/time.py:211", "timeout": 120, "type": "time", "unit": "seconds", "version": "2c6aaa836bd57cb0b8c2044e3827272b7ebc8725dd363378655986258e0270cf", "warmup_time": -1}, "time.SolverTimeMG.time_solver": {"code": "class SolverTimeMG:\n    def time_solver(self, data, semicoarsening, linerelaxation):\n        grid = data['grid']\n        if INFO > (1, 0, 0, 0):\n            sfield = Field(grid, data['sfield'].field,\n                           data['sfield'].frequency)\n        else:\n            sfield = Field(grid, data['sfield'])\n        inp = {\n            'model': data['model'],\n            'sfield': sfield,\n            'cycle': 'F',\n            'sslsolver': False,\n            'semicoarsening': semicoarsening,\n            'linerelaxation': linerelaxation,\n            'verb': VERB\n        }\n    \n        if INFO < (0, 17, 1, 7):\n            inp['grid'] = grid\n    \n        solve(**inp)\n\n    def setup_cache(self):\n        data = {}\n        grid, model, sfield = get_model('small')\n        data['grid'] = grid\n        data['model'] = model\n        data['sfield'] = sfield\n        return data", "min_run_count": 2, "name": "time.SolverTimeMG.time_solver", "number": 0, "param_names": ["semicoarsening", "linerelaxation"], "params": [["True", "False"], ["True", "False"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "setup_cache_key": "/home/dtr/Codes/emsig/benchmarks/emg3d-asv/benchmarks/time.py:168", "timeout": 120, "type": "time", "unit": "seconds", "version": "9fc0dc00e45229c00ff9fc2adb095e14f86a570a7fe4735d153f83c05ba34f50", "warmup_time": -1}, "time.SolverTimeSSL.time_solver": {"code": "class SolverTimeSSL:\n    def time_solver(self, data, sslsolver):\n        grid = data['grid']\n        if INFO > (1, 0, 0, 0):\n            sfield = Field(grid, data['sfield'].field,\n                           data['sfield'].frequency)\n        else:\n            sfield = Field(grid, data['sfield'])\n        inp = {\n            'model': data['model'],\n            'sfield': sfield,\n            'cycle': 'F',\n            'sslsolver': sslsolver,\n            'semicoarsening': True,\n            'linerelaxation': True,\n            'verb': VERB\n        }\n    \n        if INFO < (0, 17, 1, 7):\n            inp['grid'] = data['grid']\n    \n        solve(**inp)\n\n    def setup_cache(self):\n        data = {}\n        grid, model, sfield = get_model('small')\n        data['grid'] = grid\n        data['model'] = model\n        data['sfield'] = sfield\n        return data", "min_run_count": 2, "name": "time.SolverTimeSSL.time_solver", "number": 0, "param_names": ["sslsolver"], "params": [["True", "False"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "setup_cache_key": "/home/dtr/Codes/emsig/benchmarks/emg3d-asv/benchmarks/time.py:124", "timeout": 120, "type": "time", "unit": "seconds", "version": "29e05fc4f380118e3221d4425b07cd569b0204af3401dee976ffc34c060b54fd", "warmup_time": -1}}, "machines": {"dtr-laptop": {"arch": "x86_64", "cpu": "Intel(R) Core(TM) i7-6600U CPU @ 2.60GHz", "machine": "dtr-laptop", "num_cpu": "4", "os": "Linux 5.4.0-48-generic", "ram": "16275844", "version": 1}, "meerkat": {"arch": "x86_64", "cpu": "Intel(R) Core(TM) i5-5250U CPU @ 1.60GHz", "machine": "meerkat", "os": "Linux 4.15.0-47-generic", "ram": "8045576", "version": 1}}, "tags": {"v0.10.0": 398, "v0.10.1": 409, "v0.11.0": 434, "v0.12.0": 581, "v0.13.0": 602, "v0.14.0": 652, "v0.14.1": 660, "v0.14.2": 664, "v0.14.3": 673, "v0.15.0": 699, "v0.15.1": 708, "v0.15.2": 709, "v0.15.3": 722, "v0.16.0": 753, "v0.16.1": 793, "v0.17.0": 817, "v0.5.0": 20, "v0.6.0": 65, "v0.6.1": 71, "v0.6.2": 86, "v0.7.0": 139, "v0.7.1": 174, "v0.8.0": 223, "v0.8.1": 232, "v0.9.0": 277, "v0.9.1": 301, "v0.9.2": 327, "v0.9.3": 364, "v1.0.0": 1055, "v1.0.0-rc.1": 1001, "v1.0.0-rc.2": 1008, "v1.0.0-rc.3": 1052, "v1.1.0": 1099, "v1.2.0": 1130, "v1.2.1": 1187, "v1.3.0": 1243, "v1.3.1": 1255}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}